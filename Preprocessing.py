import numpy as npimport matplotlib.pyplot as pltimport osfrom sklearn.model_selection import train_test_splitdef load_npy_files(data_dir):    """    Load .npy files from a directory.    Parameters:    - data_dir: str, directory containing the .npy files.    Returns:    - A list of numpy arrays loaded from the files.    """    npy_files = [f for f in os.listdir(data_dir) if f.endswith('.npy')]    data = [np.load(os.path.join(data_dir, file)) for file in npy_files]    return np.array(data)def visualize_slice_and_mask(slice, mask, idx=0):    """    Visualize a CT slice and its corresponding tumor mask.    Parameters:    - slice: numpy array, the CT slice.    - mask: numpy array, the tumor mask.    - idx: int, index of the slice to visualize.    """    plt.figure(figsize=(10, 5))        # Show the CT slice    plt.subplot(1, 2, 1)    plt.imshow(slice[idx], cmap='gray')    plt.title(f'CT Slice {idx}')        # Show the tumor mask    plt.subplot(1, 2, 2)    plt.imshow(mask[idx], cmap='gray')    plt.title(f'Tumor Mask {idx}')        plt.show()def normalize_slices(slices):    """    Normalize the CT slices to the range [0, 1].    Parameters:    - slices: numpy array, the CT slices.    Returns:    - Normalized slices.    """    slices = slices.astype(np.float32)    return slices / np.max(slices)def binarize_masks(masks, threshold=0.5):    """    Binarize the tumor masks. If the mask is in color (red for tumors), threshold it.    Parameters:    - masks: numpy array, the tumor masks.    - threshold: float, threshold for binarization (default=0.5).    Returns:    - Binarized masks.    """    # If the mask is RGB (3 channels), we assume the tumor is marked in red channel.    if masks.ndim == 4 and masks.shape[-1] == 3:  # (num_samples, height, width, channels)        red_channel = masks[:, :, :, 0]  # Extract the red channel        return (red_channel > threshold).astype(np.uint8)    else:        return (masks > threshold).astype(np.uint8)def preprocess_and_split(slices_dir, masks_dir, test_size=0.2):    """    Load, preprocess, and split the dataset into training and validation sets.    Parameters:    - slices_dir: str, directory containing the CT slices .npy files.    - masks_dir: str, directory containing the tumor masks .npy files.    - test_size: float, the proportion of the dataset to include in the validation split (default=0.2).    Returns:    - X_train, X_val, y_train, y_val: the training and validation splits.    """    # Load CT slices and masks    slices = load_npy_files(slices_dir)    masks = load_npy_files(masks_dir)        print(f"Loaded {len(slices)} CT slices and {len(masks)} masks.")    print(f"Slice shape: {slices[0].shape}, Mask shape: {masks[0].shape}")        # Normalize slices and binarize masks    slices = normalize_slices(slices)    masks = binarize_masks(masks)        # Visualize a sample slice and mask    visualize_slice_and_mask(slices, masks, idx=0)        # Split the dataset into training and validation sets    X_train, X_val, y_train, y_val = train_test_split(slices, masks, test_size=test_size, random_state=42)        return X_train, X_val, y_train, y_val# Example usage:train_slices_dir = '/Users/zubairsaeed/Downloads/PhD/Code/1.Segmentation/Data/Dataset/Preprocessed/train/data/'train_masks_dir = '/Users/zubairsaeed/Downloads/PhD/Code/1.Segmentation/Data/Dataset/Preprocessed/train/masks/'X_train, X_val, y_train, y_val = preprocess_and_split(train_slices_dir, train_masks_dir)print(f"Training data: {X_train.shape}, Validation data: {X_val.shape}")