'''import numpy as npfrom pathlib import Pathimport matplotlib.pyplot as pltimport random# Define pathssave_root = Path("/Users/zubairsaeed/Downloads/PhD/Code/1.Segmentation/Data/Dataset/Preprocessed")train_slice_path = save_root / "train" / "data"train_mask_path = save_root / "train" / "masks"val_slice_path = save_root / "val" / "data"val_mask_path = save_root / "val" / "masks"# Function to load and process imagesdef load_and_process(slice_path, mask_path):    slice = np.load(str(slice_path))    mask = np.load(str(mask_path))    return slice, mask# Function to save images for segmentation taskdef save_for_segmentation(slice_path, mask_path, output_dir):    output_dir.mkdir(parents=True, exist_ok=True)    slice, mask = load_and_process(slice_path, mask_path)        # Check if the mask contains a tumor (non-zero values)    if np.any(mask):        # Save the CT slice        np.save(output_dir / f"ct_{slice_path.stem}.npy", slice)        # Save the mask        np.save(output_dir / f"mask_{mask_path.stem}.npy", mask)# Process training datatrain_output_dir = save_root / "segmentation_data" / "train"for slice_file in train_slice_path.glob("*.npy"):    mask_file = train_mask_path / f"mask_{slice_file.name[6:]}"    save_for_segmentation(slice_file, mask_file, train_output_dir)# Process validation dataval_output_dir = save_root / "segmentation_data" / "val"for slice_file in val_slice_path.glob("*.npy"):    mask_file = val_mask_path / f"mask_{slice_file.name[6:]}"    save_for_segmentation(slice_file, mask_file, val_output_dir)print("Segmentation dataset creation complete.")# Load a sample CT scan and mask from the segmentation datasetsample_ct_path = "/Users/zubairsaeed/Downloads/PhD/Code/1.Segmentation/Data/Dataset/Preprocessed/segmentation_data/train/ct_slice_000000100202.npy"sample_mask_path = "/Users/zubairsaeed/Downloads/PhD/Code/1.Segmentation/Data/Dataset/Preprocessed/segmentation_data/train/mask_mask_000000100202.npy"sample_ct = np.load(sample_ct_path)sample_mask = np.load(sample_mask_path)# Visualize the CT scan and maskfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 6))ax1.imshow(sample_ct, cmap='gray')ax1.set_title('CT Scan')ax1.axis('off')ax2.imshow(sample_ct, cmap='gray')ax2.imshow(sample_mask, alpha=0.5, cmap='red')ax2.set_title('CT Scan with Tumor Mask')ax2.axis('off')plt.tight_layout()plt.show()print(f"CT scan shape: {sample_ct.shape}")print(f"Mask shape: {sample_mask.shape}")'''import randomfrom pathlib import Pathimport numpy as npimport matplotlib.pyplot as pltimport cv2# Define the path to your train directorytrain_dir = Path("/Users/zubairsaeed/Downloads/PhD/Code/1.Segmentation/Data/Dataset/Preprocessed/segmentation_data/train")print("Contents of train directory:")print(list(train_dir.glob("*")))# Get lists of all CT slices and masksct_slices = list(train_dir.glob("ct_slice_*.npy"))masks = list(train_dir.glob("mask_mask_*.npy"))print(f"\nNumber of CT slices found: {len(ct_slices)}")print(f"Number of masks found: {len(masks)}")if len(ct_slices) == 0 or len(masks) == 0:    print("No files found. Please check the directory path and file naming convention.")else:    # Choose a random index    random_index = random.randint(0, len(ct_slices) - 1)    # Load a random CT slice and its corresponding mask    slice_path = ct_slices[random_index]    mask_path = masks[random_index]    slice = np.load(str(slice_path))    mask = np.load(str(mask_path))    print(f"\nLoaded slice shape: {slice.shape}")    print(f"Loaded mask shape: {mask.shape}")    # Visualize the CT scan and mask    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 6))    ax1.imshow(slice, cmap="bone")    ax1.set_title('CT Scan')    ax1.axis('off')    ax2.imshow(slice, cmap="bone")    mask_ = np.ma.masked_where(mask==0, mask)    ax2.imshow(mask_, alpha=0.5, cmap="autumn")    ax2.set_title('CT Scan with Tumor Mask')    ax2.axis('off')    plt.tight_layout()    plt.show()    # Find slices with tumors    tumor_slice_idxs = []    for i, mask_path in enumerate(masks):        mask = np.load(str(mask_path))        if np.any(mask):            tumor_slice_idxs.append(i)    print("\nIndexes of slices with tumors:")    print(tumor_slice_idxs)